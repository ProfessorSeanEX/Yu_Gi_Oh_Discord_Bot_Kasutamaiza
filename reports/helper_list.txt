# **Kasutamaiza Bot Helper List**

## **Table of Contents**

1. [Introduction](#introduction)
2. [Encapsulated Helpers](#encapsulated-helpers)
   - [Environment Helper](#environment-helper)
   - [Shutdown Helper](#shutdown-helper)
   - [Logging Helper](#logging-helper)
3. [Helpers Awaiting Encapsulation](#helpers-awaiting-encapsulation)
   - [Core Helper](#core-helper)
   - [Command Management Helper](#command-management-helper)
   - [Permission Helper](#permission-helper)
   - [Communication Helper](#communication-helper)
   - [Pagination Helper](#pagination-helper)
   - [Loading Helper](#loading-helper)
4. [Pending Helpers](#pending-helpers)
   - [Advance Moderation Helper](#advance-moderation-helper)
   - [AI Helper](#ai-helper)
   - [Analytics Helper](#analytics-helper)
   - [API Helper](#api-helper)
   - [Async Helper](#async-helper)
   - [Connection Helper](#connection-helper)
   - [Custom Card Helper](#custom-card-helper)
   - [DB (Database) Helper](#db-database-helper)
   - **[DB (Database) Global (Special Case Helper)](#db-database-helper)**
   - **[DB (Database) Manager (Special Case Helper)](#db-manager-special-case-helper)**
   - [Economy Helper](#economy-helper)
   - [Error Tracker Helper](#error-tracker-helper)
   - [Event Helper](#event-helper)
   - [File Helper](#file-helper)
   - [Game State Helper](#game-state-helper)
   - [Gameplay Helper](#gameplay-helper)
   - [Moderation Helper](#moderation-helper)
   - [Nova Dawn Helper (Hey, Look It's You!)](#nova-dawn-helper-hey-look-its-you)
   - [Profile Helper](#profile-helper)
   - [Role Management Helper](#role-management-helper)
   - [Rule Enforcement Helper](#rule-enforcement-helper)
   - [Scheduling Helper](#scheduling-helper)
   - [Schema Helper](#schema-helper)
   - [Security Helper](#security-helper)
   - [Session Helper](#session-helper)
   - [Task Helper](#task-helper)
   - [Testing Helper](#testing-helper)
   - [Transaction Helper (DB Related)](#transaction-helper-db-related)
   - [User Helper](#user-helper)
   - [Yugioh Helper](#yugioh-helper)
5. [Conclusion](#conclusion)

---

## **Introduction**

This document serves as a detailed reference for all helper files within the Kasutamaiza Bot project. The document is designed to complement the Kasutamaiza Coding Guide and Index, providing a structured overview of encapsulated helpers, helpers awaiting encapsulation, and pending helpers.

The Encapsulated Helpers section contains fully documented helpers that adhere to the project's standards and practices, ensuring seamless modular functionality. Helpers Awaiting Encapsulation lists those not yet standardized, while the Pending Helpers section is reserved for planned but undeveloped helpers.

---

## **Encapsulated Helpers**

### **Environment Helper**

**Purpose**:  
The Environment Helper is encapsulated to provide centralized utilities for managing and validating environment variables. Its functions are designed to be standalone and integrate seamlessly with the botâ€™s modular framework.

**Metadata**:  

- **Version**: 1.0.0
- **Author**: ProfessorSeanEX  
- **Purpose**: Centralized utilities for managing and validating environment variables.

**Class**: `EnvironmentHelper`

**Primary Methods**:

1. **`__init__`**  
   - **Description**:  
     Initializes the Environment Helper and registers critical functions in the global namespace for transitional compatibility.
   - **Example**:

     ```python
     env_helper = EnvironmentHelper()
     ```

2. **fetch_environment_variable**  
   - **Description**:  
     Fetches and validates an environment variable.
   - **Parameters**:  
     - `key` (`str`): Name of the environment variable.  
     - `expected_type` (`type`): Expected type of the variable value.  
     - `default` (`Any`): Default value if the environment variable is not set.
   - **Returns**:  
     - `Any`: The value of the environment variable, cast to the expected type, or the default value.
   - **Example**:

     ```python
     token = env_helper.fetch_environment_variable("BOT_TOKEN", str)
     ```

3. **list_environment_variables**  
   - **Description**:  
     Lists all currently loaded environment variables.
   - **Parameters**:  
     None.
   - **Returns**:  
     - `dict`: A dictionary of all environment variables and their values.
   - **Example**:

     ```python
     env_vars = env_helper.list_environment_variables()
     ```

4. **validate_required_environment_variables**  
   - **Description**:  
     Validates that all required environment variables are set and conform to expected types.
   - **Parameters**:  
     - `required_vars` (`dict`): Dictionary where keys are variable names and values are their expected types.
   - **Returns**:  
     - `dict`: A dictionary of validated environment variables.
   - **Example**:

     ```python
     env_vars = env_helper.validate_required_environment_variables({"BOT_TOKEN": str, "GUILD_ID": int})
     ```

5. **set_default_environment_variable**  
   - **Description**:  
     Sets a default value for an environment variable if it is not already set.
   - **Parameters**:  
     - `key` (`str`): Name of the environment variable.  
     - `value` (`str`): Default value to set if not already defined.
   - **Returns**:  
     None.
   - **Example**:

     ```python
     env_helper.set_default_environment_variable("DEBUG_MODE", "false")
     ```

6. **setup**  
   - **Description**:  
     Sets up the Environment Helper, logs metadata, and confirms initialization.
   - **Parameters**:  
     None.
   - **Returns**:  
     None.
   - **Example**:

     ```python
     await env_helper.setup()
     ```

**Implementation Notes**:

- Fully encapsulated with no reliance on other helpers.
- Includes detailed logging for debugging and traceability.

---

### **Shutdown Helper**

**Purpose**:  
The Shutdown Helper is encapsulated to manage graceful bot shutdown procedures and resource cleanup. Its design ensures clean termination by handling database connections, registered tasks, and system signals within a self-contained structure.

**Metadata**:  

- **Version**: 1.0.0  
- **Author**: ProfessorSeanEX  
- **Purpose**: Encapsulated utility for managing bot shutdown and resource cleanup.

**Class**: `ShutdownHelper`

**Primary Methods**:

1. **`__init__`**  
   - **Description**:  
     Initializes the Shutdown Helper, managing dependencies and preparing for cleanup tasks.  
   - **Parameters**:  
     - `bot` (`Bot`): The Discord bot instance.  
     - `db_manager` (`Optional[Callable]`): Database manager instance for resource handling.  
   - **Example**:

     ```python
     shutdown_helper = ShutdownHelper(bot, db_manager)
     ```

2. **register_task**  
   - **Description**:  
     Registers a cleanup task to execute during shutdown.  
   - **Parameters**:  
     - `task` (`Callable`): The task to register.  
   - **Returns**:  
     None.  
   - **Example**:

     ```python
     shutdown_helper.register_task(cleanup_function)
     ```

3. **shutdown_procedure**  
   - **Description**:  
     Executes the shutdown procedure, handling database closure and registered tasks.  
   - **Parameters**:  
     None.  
   - **Returns**:  
     None.  
   - **Example**:

     ```python
     await shutdown_helper.shutdown_procedure()
     ```

4. **graceful_shutdown**  
   - **Description**:  
     Executes the shutdown procedure in response to system signals.  
   - **Parameters**:  
     None.  
   - **Returns**:  
     None.  
   - **Example**:

     ```python
     await shutdown_helper.graceful_shutdown()
     ```

5. **setup_signal_handlers**  
   - **Description**:  
     Configures signal handlers for clean termination upon receiving system signals (e.g., SIGINT, SIGTERM).  
   - **Parameters**:  
     None.  
   - **Returns**:  
     None.  
   - **Example**:

     ```python
     shutdown_helper.setup_signal_handlers()
     ```

6. **setup**  
   - **Description**:  
     Prepares the Shutdown Helper for use by configuring signal handlers.  
   - **Parameters**:  
     None.  
   - **Returns**:  
     None.  
   - **Example**:

     ```python
     await shutdown_helper.setup()
     ```

**Implementation Notes**:

- Encapsulated with no reliance on external global state.  
- Includes modular functionality for task registration, signal handling, and shutdown execution.  
- Logs detailed actions and errors to ensure traceability and debugging support.  

---

### **Logging Helper**

**Purpose**:  
The Logging Helper is encapsulated to provide centralized utilities for error tracking, performance monitoring, real-time alerts, and automated log management. It is designed to ensure robust, consistent, and traceable logging across the bot's modular framework.

**Metadata**:  

- **Version**: 1.0.0
- **Author**: ProfessorSeanEX  
- **Purpose**: Enhance logging capabilities for error tracking, performance monitoring, real-time alerts, and automated log management.

**Class**: `LoggingHelper`

**Primary Methods**:

1. **`__init__`**  
   - **Description**:  
     Initializes the Logging Helper by configuring the log directory, file rotation, retention policies, and format.
   - **Example**:

     ```python
     logging_helper = LoggingHelper()
     ```

2. **log_error**  
   - **Description**:  
     Logs detailed error information for debugging purposes.
   - **Parameters**:  
     - `function_name` (`str`): The name of the function where the error occurred.  
     - `exception` (`Exception`): Exception object containing error details.
   - **Returns**:  
     None.
   - **Example**:

     ```python
     logging_helper.log_error("my_function", ValueError("An example error occurred"))
     ```

3. **log_command_error**  
   - **Description**:  
     Logs details about errors occurring within bot commands.
   - **Parameters**:  
     - `command_name` (`str`): Name of the command.  
     - `ctx` (command context): Context of the command.  
     - `exception` (`Exception`): Exception object containing error details.
   - **Returns**:  
     None.
   - **Example**:

     ```python
     logging_helper.log_command_error("example_command", ctx, ValueError("Example error"))
     ```

4. **log_command**  
   - **Description**:  
     Logs successful execution of commands with user and guild context.
   - **Parameters**:  
     - `ctx` (command context): Context of the command.  
     - `command_name` (`str`): Name of the executed command.
   - **Returns**:  
     None.
   - **Example**:

     ```python
     logging_helper.log_command(ctx, "example_command")
     ```

5. **log_command_registration**  
   - **Description**:  
     Logs metadata about command registration to cogs and categories.
   - **Parameters**:  
     - `command` (Command): The command being registered.  
     - `cog_name` (`str`): Name of the cog.  
     - `category` (`str`): Category of the command.
   - **Returns**:  
     None.
   - **Example**:

     ```python
     logging_helper.log_command_registration(command, "GeneralCog", "Utility")
     ```

6. **monitor_logs_for_alerts**  
   - **Description**:  
     Monitors logs for specific keywords and sends alerts to a Discord channel when triggered.
   - **Parameters**:  
     - `bot` (Discord Bot): Bot instance for sending alerts.  
     - `channel_id` (`int`): Discord channel ID for alert notifications.  
     - `file_path` (`str`): Path to the log file to monitor.  
     - `keywords` (`list[str]`): Keywords to trigger alerts.
   - **Returns**:  
     None.
   - **Example**:

     ```python
     await logging_helper.monitor_logs_for_alerts(bot, 1234567890, "./logs/bot.log", ["ERROR", "CRITICAL"])
     ```

7. **extract_error_logs**  
   - **Description**:  
     Extracts recent log entries of specified severity for debugging.
   - **Parameters**:  
     - `file_path` (`str`): Path to the log file.  
     - `severity` (`str`): Log severity to filter by (e.g., "ERROR").  
     - `lines` (`int`): Number of lines to retrieve.
   - **Returns**:  
     - `str`: Filtered log entries as a string.
   - **Example**:

     ```python
     logs = logging_helper.extract_error_logs("./logs/bot.log", "ERROR", 10)
     ```

8. **log_query_performance**  
   - **Description**:  
     Logs performance metrics of a database query, including execution time and rows affected.
   - **Parameters**:  
     - `query` (`str`): The SQL query executed.  
     - `execution_time` (`float`): Time taken to execute the query in seconds.  
     - `rows_affected` (`int`): Number of rows affected by the query.
   - **Returns**:  
     None.
   - **Example**:

     ```python
     logging_helper.log_query_performance("SELECT * FROM users;", 0.34, 12)
     ```

9. **log_database_interaction**  
    - **Description**:  
      Logs database interactions, including queries and their parameters.
    - **Parameters**:  
      - `query` (`str`): The SQL query being executed.  
      - `parameters` (`list`, optional): Parameters used in the query.
    - **Returns**:  
      None.
    - **Example**:

      ```python
      logging_helper.log_database_interaction("INSERT INTO users (name) VALUES (%s);", ["John Doe"])
      ```

10. **auto_cleanup_logs**  
    - **Description**:  
      Cleans up old log files by archiving them if the log directory exceeds a specified size.
    - **Parameters**:  
      - `directory` (`str`): Directory containing log files.  
      - `archive_dir` (`str`): Directory for storing archived logs.  
      - `max_size_mb` (`int`): Maximum allowed size of the log directory in megabytes.
    - **Returns**:  
      None.
    - **Example**:

      ```python
      logging_helper.auto_cleanup_logs("./logs", "./logs/archive", 100)
      ```

11. **aggregate_logs**  
    - **Description**:  
      Combines multiple log files into a single output file for analysis.
    - **Parameters**:  
      - `log_files` (`list[str]`): List of log file paths to aggregate.  
      - `output_file` (`str`): Path for the aggregated log file.
    - **Returns**:  
      None.
    - **Example**:

      ```python
      logging_helper.aggregate_logs(["./logs/bot.log", "./logs/errors.log"], "./logs/aggregated_logs.log")
      ```

12. **log_custom**  
    - **Description**:  
      Logs a message at a specified custom log level.
    - **Parameters**:  
      - `level` (`str`): The log level (e.g., "DEBUG", "ERROR").  
      - `message` (`str`): The log message to record.
    - **Returns**:  
      None.
    - **Example**:

      ```python
      logging_helper.log_custom("DEBUG", "Custom debugging message.")
      ```

13. **log_registered_commands**  
    - **Description**:  
      Logs all registered bot commands for debugging and validation.
    - **Parameters**:  
      - `bot` (`discord.Bot`): The bot instance.
    - **Returns**:  
      None.
    - **Example**:

      ```python
      logging_helper.log_registered_commands(my_bot_instance)
      ```

14. **redact_sensitive_data**  
    - **Description**:  
      Redacts sensitive data from log messages before recording.
    - **Parameters**:  
      - `message` (`str`): The log message to redact.  
      - `patterns` (`list[str]`): List of regex patterns to redact.
    - **Returns**:  
      - `str`: The redacted log message.
    - **Example**:

      ```python
      safe_message = logging_helper.redact_sensitive_data("Token: 12345", [r"Token: \d+"])
      ```

15. **compress_logs**  
    - **Description**:  
      Compresses archived logs for efficient storage.
    - **Parameters**:  
      - `directory` (`str`): Path to the directory containing log files to compress.  
      - `output_file` (`str`): Path for the compressed archive.
    - **Returns**:  
      None.
    - **Example**:

      ```python
      logging_helper.compress_logs("./logs/archive", "./logs/logs_archive.zip")
      ```

16. **monitor_error_threshold**  
    - **Description**:  
      Monitors log entries for a specified error threshold and sends alerts when exceeded.
    - **Parameters**:  
      - `file_path` (`str`): Path to the log file to monitor.  
      - `threshold` (`int`): Maximum allowed errors before triggering an alert.
    - **Returns**:  
      None.
    - **Example**:

      ```python
      await logging_helper.monitor_error_threshold("./logs/bot.log", 5)
      ```

17. **search_logs**  
    - **Description**:  
      Searches log files for entries matching a given pattern.
    - **Parameters**:  
      - `file_path` (`str`): Path to the log file to search.  
      - `pattern` (`str`): Regex pattern to match.
    - **Returns**:  
      - `list[str]`: Matching log entries.
    - **Example**:

      ```python
      matches = logging_helper.search_logs("./logs/bot.log", r"ERROR.*")
      ```

18. **set_log_level**  
    - **Description**:  
      Dynamically sets the log level for the application.
    - **Parameters**:  
      - `level` (`str`): The desired log level (e.g., "DEBUG", "ERROR").
    - **Returns**:  
      None.
    - **Example**:

      ```python
      logging_helper.set_log_level("DEBUG")
      ```

19. **setup**  
   - **Description**:  
     Configures the Logging Helper and validates setup.
   - **Parameters**:  
     None.
   - **Returns**:  
     None.
   - **Example**:

     ```python
     await logging_helper.setup()
     ```

### **Implementation Notes**:

- Fully encapsulated with clear separation of concerns.
- Provides robust logging capabilities while maintaining clean and traceable logs.
- Integrates seamlessly with other helpers and bot functionalities.

---

## **Helpers Awaiting Encapsulation**

### **Core Helper**

- **File Name**: `core_helper.py`
- **Purpose**: Provides foundational utility functions for bot metadata, time formatting, string manipulation, and validation.
- **Version**: `v1.0.0`
- **Author**: Team Kasutamaiza

#### **Function List**

1. **`build_metadata(bot: discord.Bot, version: str, author: str, uptime: str) -> dict`**
   - **Purpose**: Constructs metadata fields for the bot, useful for debugging or creating informational embeds.
   - **Parameters**:
     - `bot (discord.Bot)`: The bot instance.
     - `version (str)`: The bot's version number.
     - `author (str)`: The name of the botâ€™s creator.
     - `uptime (str)`: A formatted string showing how long the bot has been running.
   - **Returns**: `dict` containing bot name, ID, version, author, and uptime.
   - **Category**: **Core Bot Metadata Helpers**

2. **`format_time_ago(timestamp: datetime) -> str`**
   - **Purpose**: Converts a timestamp into a human-readable "time ago" format (e.g., "5 minutes ago").
   - **Parameters**:
     - `timestamp (datetime)`: The timestamp to calculate from.
   - **Returns**: `str` describing the elapsed time since the timestamp.
   - **Category**: **Time and Formatting Helpers**

3. **`format_uptime(start_time: datetime) -> str`**
   - **Purpose**: Calculates and formats the botâ€™s uptime.
   - **Parameters**:
     - `start_time (datetime)`: The time the bot started running.
   - **Returns**: `str` formatted as "X days, HH:MM:SS."
   - **Category**: **Time and Formatting Helpers**

4. **`split_long_string(text: str, limit: int = 1024) -> List[str]`**
   - **Purpose**: Splits a long string into smaller chunks to fit Discord message limits or similar constraints.
   - **Parameters**:
     - `text (str)`: The input string to split.
     - `limit (int)`: Maximum length of each chunk (default: 1024).
   - **Returns**: `List[str]` containing string chunks.
   - **Category**: **String and List Helpers**

5. **`truncate_string(text: str, limit: int = 1024, suffix: str = "...") -> str`**
   - **Purpose**: Truncates a string to a specific length, appending a suffix if truncated.
   - **Parameters**:
     - `text (str)`: The input string to truncate.
     - `limit (int)`: Maximum allowed length of the string (default: 1024).
     - `suffix (str)`: Suffix to append when truncation occurs (default: "...").
   - **Returns**: `str` containing the truncated string.
   - **Category**: **String and List Helpers**

6. **`chunk_list(data: List[Any], chunk_size: int) -> List[List[Any]]`**
   - **Purpose**: Splits a list into smaller chunks of a specified size.
   - **Parameters**:
     - `data (List[Any])`: The input list to split.
     - `chunk_size (int)`: Number of items per chunk.
   - **Returns**: `List[List[Any]]` containing smaller chunks of the original list.
   - **Category**: **String and List Helpers**

7. **`validate_number_range(value: int, min_val: int, max_val: int) -> bool`**
   - **Purpose**: Checks if a number falls within a specified range.
   - **Parameters**:
     - `value (int)`: The number to validate.
     - `min_val (int)`: Minimum allowable value.
     - `max_val (int)`: Maximum allowable value.
   - **Returns**: `bool` indicating whether the number is within the range.
   - **Category**: **Validation Helpers**

8. **`setup(*args, **kwargs) -> None`**
   - **Purpose**: Initializes the helper module and logs metadata.
   - **Parameters**: (None specified; accepts optional `args` and `kwargs`.)
   - **Returns**: `None`
   - **Category**: **Setup Function**

---

### **Command Management Helper**

- **File Name**: `command_management.py`
- **Purpose**: Streamlines command management and validation for enhanced modularity and scalability.
- **Version**: `1.0.0`
- **Author**: ProfessorSeanEX
- **Description**: This file includes utilities to handle command categorization, formatting, and validation, ensuring all commands adhere to the required structure.

#### **Function List**

1. **`format_command(cmd: discord.SlashCommand) -> str`**
   - **Purpose**: Formats a command for display with its name and description.
   - **Parameters**:
     - `cmd (discord.SlashCommand)`: The command object to format.
   - **Returns**: A formatted string showing the command name and description.

2. **`validate_command_decorators(bot: discord.Bot) -> None`**
   - **Purpose**: Validates that all commands are properly decorated as SlashCommands.
   - **Parameters**:
     - `bot (discord.Bot)`: The bot instance to validate commands for.
   - **Returns**: None.

3. **`get_commands_by_category(bot: discord.Bot, category_name: str) -> str`**
   - **Purpose**: Retrieves commands dynamically by category.
   - **Parameters**:
     - `bot (discord.Bot)`: The bot instance.
     - `category_name (str)`: The category name to filter commands by.
   - **Returns**: A formatted string of commands in the specified category.

4. **`categorize_commands(bot: discord.Bot, group_by: str = "category") -> Dict[str, List[str]]`**
   - **Purpose**: Categorizes commands based on a specified grouping attribute.
   - **Parameters**:
     - `bot (discord.Bot)`: The bot instance.
     - `group_by (str)`: The attribute to group commands by (default: `category`).
   - **Returns**: A dictionary where keys are category names and values are lists of commands.

5. **`assign_guild_ids(commands: List[discord.SlashCommand], guild_id: int) -> None`**
   - **Purpose**: Assigns a specific guild ID to a list of commands.
   - **Parameters**:
     - `commands (List[discord.SlashCommand])`: A list of commands to assign the guild ID to.
     - `guild_id (int)`: The guild ID to assign.
   - **Returns**: None.

6. **`setup(*args, **kwargs) -> None`**
   - **Purpose**: Initializes the Command Management Helper module.
   - **Parameters**: Optional `args` and `kwargs`.
   - **Returns**: None.

---

### **Permission Helper**

- **File Name**: `permission_helper.py`
- **Purpose**: Centralized utilities for validating and managing permissions in Discord commands.
- **Version**: `1.0.0`
- **Author**: ProfessorSeanEX
- **Description**: This helper provides functions for validating bot and user permissions, summarizing permission status, and managing responses for permission errors.

#### **Function List**

1. **`validate_permissions(ctx: discord.ApplicationContext, required_permissions: List[str]) -> Dict[str, List[str]]`**
   - **Purpose**: Validates the botâ€™s permissions for the current guild or channel.
   - **Parameters**:
     - `ctx (discord.ApplicationContext)`: The commandâ€™s context.
     - `required_permissions (List[str])`: List of permissions to validate.
   - **Returns**: A dictionary summarizing missing permissions, validation status, and a detailed summary.

2. **`validate_user_permissions(member: discord.Member, required_permissions: List[str]) -> Dict[str, List[str]]`**
   - **Purpose**: Validates a userâ€™s permissions in the guild.
   - **Parameters**:
     - `member (discord.Member)`: The user or member to validate.
     - `required_permissions (List[str])`: List of permissions to validate.
   - **Returns**: A dictionary summarizing missing permissions, validation status, and a detailed summary.

3. **`validate_bot_permissions(bot_member: discord.Member, required_permissions: List[str]) -> Dict[str, List[str]]`**
   - **Purpose**: Validates if the bot has the required permissions in the guild.
   - **Parameters**:
     - `bot_member (discord.Member)`: The botâ€™s member object in the guild.
     - `required_permissions (List[str])`: List of permissions to validate.
   - **Returns**: A dictionary summarizing missing permissions, validation status, and a detailed summary.

4. **`summarize_permissions(perms: discord.Permissions, required_permissions: List[str]) -> str`**
   - **Purpose**: Summarizes which permissions are present or missing with a checkmark or cross for each.
   - **Parameters**:
     - `perms (discord.Permissions)`: The Discord permissions object.
     - `required_permissions (List[str])`: List of permissions to check.
   - **Returns**: A string summary of each permission with a checkmark or cross.

5. **`respond_permission_denied(ctx: discord.ApplicationContext, missing_permissions: List[str]) -> discord.Embed`**
   - **Purpose**: Sends an embed response for permission denial.
   - **Parameters**:
     - `ctx (discord.ApplicationContext)`: The command context.
     - `missing_permissions (List[str])`: List of missing permissions.
   - **Returns**: A formatted embed response.

6. **`setup(*args, **kwargs) -> None`**
   - **Purpose**: Initializes the Permission Helper module.
   - **Parameters**: Accepts optional `args` and `kwargs`.
   - **Returns**: None.

---

### **Communication Helper**

- **File Name**: `communication_helper.py`
- **Purpose**: Provides utilities for consistent communication via Discord messages and embeds.
- **Version**: `1.0.0`
- **Author**: ProfessorSeanEX
- **Description**: This helper includes utilities for messaging, broadcasting, templated embeds, and error handling in Discord bots.

#### **Function List**

1. **`send_message(channel: discord.abc.Messageable, content: Optional[str], embed: Optional[discord.Embed]) -> discord.Message`**
   - **Purpose**: Sends a message to a specific channel or user.
   - **Parameters**:
     - `channel`: The target channel or user.
     - `content`: Plain text content of the message.
     - `embed`: Optional embed object.
   - **Returns**: The sent Discord message.

2. **`send_dm(user: discord.User, content: Optional[str], embed: Optional[discord.Embed]) -> discord.Message`**
   - **Purpose**: Sends a direct message to a user.
   - **Parameters**:
     - `user`: The target user.
     - `content`: Plain text content of the message.
     - `embed`: Optional embed object.
   - **Returns**: The sent Discord message.

3. **`broadcast_message(bot: discord.Bot, channel_ids: List[int], content: Optional[str], embed: Optional[discord.Embed]) -> None`**
   - **Purpose**: Broadcasts a message to multiple channels.
   - **Parameters**:
     - `bot`: The bot instance.
     - `channel_ids`: List of channel IDs.
     - `content`: Plain text content of the message.
     - `embed`: Optional embed object.
   - **Returns**: None.

4. **`create_embed(title: str, description: str, fields: Optional[Dict[str, str]], color: discord.Color) -> discord.Embed`**
   - **Purpose**: Creates a templated embed for messaging.
   - **Parameters**:
     - `title`: Title of the embed.
     - `description`: Description of the embed.
     - `fields`: Optional dictionary of fields to include.
     - `color`: Embed color.
   - **Returns**: A Discord embed object.

5. **`send_alert(bot: discord.Bot, channel_id: int, alert_type: str, content: Optional[str]) -> discord.Message`**
   - **Purpose**: Sends an alert message to a specific channel.
   - **Parameters**:
     - `bot`: The bot instance.
     - `channel_id`: ID of the target channel.
     - `alert_type`: Type of alert (e.g., "Critical", "Info").
     - `content`: Optional alert message content.
   - **Returns**: The sent Discord message.

6. **`respond_with_error(ctx, title: str, description: str) -> None`**
   - **Purpose**: Sends an error response as an embed.
   - **Parameters**:
     - `ctx`: The command context.
     - `title`: Title of the error response.
     - `description`: Description of the error.
   - **Returns**: None.

7. **`respond_with_embed(ctx, title: str, description: Optional[str], fields: Optional[dict], color: discord.Color, ephemeral: bool) -> None`**
   - **Purpose**: Sends an embed response with optional fields and description.
   - **Parameters**:
     - `ctx`: The command context.
     - `title`: Title of the embed.
     - `description`: Optional description of the embed.
     - `fields`: Optional dictionary of fields.
     - `color`: Embed color.
     - `ephemeral`: Whether the response is ephemeral.
   - **Returns**: None.

8. **`format_embed_response(ctx, title: str, fields: dict, color: discord.Color, ephemeral: bool) -> None`**
   - **Purpose**: Formats and sends an embedded response.
   - **Parameters**:
     - `ctx`: The command context.
     - `title`: Title of the embed.
     - `fields`: Dictionary of fields to include in the embed.
     - `color`: Embed color.
     - `ephemeral`: Whether the response is ephemeral.
   - **Returns**: None.

9. **Utility Functions**:
   - **`split_embed_fields(fields: dict) -> dict`**: Splits embed fields exceeding 1024 characters.
   - **`organize_embed_fields(fields: Dict[str, List[str]], max_length: int) -> Dict[str, List[str]]`**: Organizes and splits embed fields.
   - **`generate_card_embed(card: dict) -> discord.Embed`**: Generates an embed for a Yu-Gi-Oh! card.
   - **`stringify_fields(fields: dict) -> dict`**: Converts all field values to strings.

10. **`setup(*args, **kwargs) -> None`**
    - **Purpose**: Initializes the Communication Helper module.
    - **Parameters**: Optional `args` and `kwargs`.
    - **Returns**: None.

---

### **Pagination Helper**

- **File Name**: `pagination_helper.py`
- **Purpose**: Manage paginated content for multi-result commands.
- **Version**: `1.0.0`
- **Author**: ProfessorSeanEX
- **Description**: This helper includes utilities for creating paginated responses, such as handling multiple results, text chunks, and lists in Discord bots.

#### **Function List**

1. **`handle_multi_result(ctx, items: List[Dict], title_key: str, desc_key: str, img_key: str) -> None`**
   - **Purpose**: Handles multiple results by providing a paginated embed.
   - **Parameters**:
     - `ctx`: The command context.
     - `items`: List of item data dictionaries.
     - `title_key`: Key to extract the title from item data.
     - `desc_key`: Key to extract the description from item data.
     - `img_key`: Key to extract the image URL from item data.
   - **Returns**: None.

2. **`paginate_cards(ctx, cards: List[Dict]) -> None`**
   - **Purpose**: Handles multiple card results with pagination.
   - **Parameters**:
     - `ctx`: The command context.
     - `cards`: List of card data dictionaries.
   - **Returns**: None

3. **`paginate_embed_fields`**  
  **Purpose**: Splits embed fields into chunks suitable for pagination.  
  **Arguments**:  
    - `fields (dict)`: A dictionary of embed fields to paginate.  
    - `limit (int)`: Character limit per field. Defaults to `1024`.  
  **Returns**: `list[dict]`: A list of paginated field dictionaries.

4. **`paginate_embeds`**  
  **Purpose**: Generates paginated embeds for fields exceeding Discord's limits.  
  **Arguments**:  
    - `title (str)`: The title for the embeds.  
    - `fields (dict)`: A dictionary of fields to paginate.  
    - `color (discord.Color, optional)`: Embed color. Defaults to `blue`.  
  **Returns**: `list[discord.Embed]`: List of paginated embeds.

5. **`paginate_text`**  
  **Purpose**: Handles pagination for long text data.  
  **Arguments**:  
    - `ctx`: The command context.  
    - `text (str)`: The large text to paginate.  
    - `title (str, optional)`: Title for each page. Defaults to `Paginated Text`.  
    - `limit (int, optional)`: Character limit for each page. Defaults to `2000`.  
  **Returns**: `None`.

6. **`paginate_list(ctx, items: List[str], title: str = "Paginated List", items_per_page: int = 10) -> None`**
   - **Purpose**: Paginates a list of strings into multiple pages.
   - **Parameters**:
     - `ctx`: The command context.
     - `items`: The list of strings to paginate.
     - `title`: Title for each page.
     - `items_per_page`: Number of items per page. Default is 10.
   - **Returns**: None.

7. **`setup(*args, **kwargs)`**
   - **Purpose**: Initializes the Pagination Helper module, logging its setup details.  
   - **Parameters**: Optional arguments for further configuration.  
   - **Returns**: None.  

---

### **Loading Helper**

- **File Name**: `loading_helper.py`
- **Purpose**: Centralized functions for dynamically loading and managing Python modules (cogs, utilities, etc.) in the Kasutamaiza Bot.
- **Version**: `1.0.0`
- **Author**: `ProfessorSeanEX`

#### **Function List**

1. **`load_modules_from_directory`**
   - **Purpose**: Dynamically loads Python modules from a specified directory.
   - **Arguments**:
     - `directory (str)`: The directory path containing module files.
     - `module_type (str)`: The type of modules (e.g., 'cogs', 'utils').
     - `bot (optional)`: The Discord bot instance, passed to setup functions.
     - `guild_id (Optional[int])`: Guild ID for scoping specific modules.
     - `token (Optional[str])`: Bot token, if needed for validation.
   - **Returns**: `Dict[str, list]` â€“ Summary of loaded and failed modules.
   - **Notes**:
     - Skips modules without callable `setup` functions.
     - Provides detailed logging for each loaded or failed module.

2. **`validate_module_attributes`**
   - **Purpose**: Validates that a module contains all required attributes.
   - **Arguments**:
     - `module`: The imported module to validate.
     - `required_attributes (list)`: Attributes that must be present in the module.
   - **Returns**: `bool` â€“ True if all required attributes exist, False otherwise.

3. **`filter_modules_in_directory`**
   - **Purpose**: Filters Python files in a directory, excluding private files.
   - **Arguments**:
     - `directory (str)`: Path to the directory containing files.
   - **Returns**: `List[Path]` â€“ Filtered list of Python files.

4. **`validate_directory`**
   - **Purpose**: Validates that a directory exists and is accessible.
   - **Arguments**:
     - `directory (str)`: Path to the directory to validate.
   - **Returns**: `Path` â€“ Validated Path object.
   - **Raises**: `ValueError` â€“ If the directory is invalid or inaccessible.

5. **`log_module_status`**
   - **Purpose**: Logs the status of a module during the load process.
   - **Arguments**:
     - `module_name (str)`: Name of the module.
     - `status (str)`: Status of the module (`'success'`, `'skipped'`, `'failed'`).
     - `error (Optional[str])`: Error message, if applicable.
   - **Returns**: None.

6. **`reload_modules_from_directory`**
   - **Purpose**: Dynamically reloads modules from a specified directory.
   - **Arguments**:
     - `directory (str)`: Path to the directory containing modules.
     - `module_type (str)`: Type of modules to reload.
   - **Returns**: `Dict[str, list]` â€“ Summary of successfully reloaded and failed modules.

7. **`setup`**
   - **Purpose**: Initializes the Loading Helper by loading modules from a specified directory.
   - **Arguments**:
     - `directory (str)`: The directory path containing module files.
     - `module_type (str)`: The type of modules to load (e.g., 'cogs', 'utils').
     - `bot (optional)`: The Discord bot instance, passed to setup functions.
     - `guild_id (Optional[int])`: Guild ID for scoping specific modules.
     - `token (Optional[str])`: Bot token, if needed for validation.
   - **Returns**: None.
   - **Notes**:
     - Ensures dynamic module loading aligns with helper standards.
     - Logs the results of successful and failed module loads.

---

## **Pending Helpers**

This section is reserved for planned helpers or those under development. It is currently empty.

---

## **Conclusion**

The **Kasutamaiza Bot Helper List** is a living document that catalogs the current state of helper utilities. Encapsulation is a key principle that guides the evolution of the botâ€™s modular architecture. By adhering to the **Kasutamaiza Coding Guide and Index**, this list supports the projectâ€™s transformation into a scalable, modular game engine for custom Yu-Gi-Oh! gameplay.
